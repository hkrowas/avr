1001010011101000 00000000 00000000 -0------ 00000000 /* 00  BCLR: Clear the I flag to initialize it */
1001010011111000 00000000 00000000 00------ 00000000 /* 20  BCLR: Clear the T flag to initialize it */
0000110000000000 11110000 00001111 00010100 11111111 /* 40  ADD: Adding 0xF0 and 0x0F */
0001110000000000 00000001 11111111 00100011 00000000 /* 60  ADC: adding 0xFF and 0x01 */
0001010000000000 00111111 11111111 00000001 -------- /* 80  CP: comparing 0x3F to 0xFF in registers */
0001010000000000 00111111 00111111 00000010 -------- /* 100 CP: comparing 0x3F to 0x3F, zero flag set */
0011000000000000 00111111 11111111 00000001 -------- /* 120 CPI: comparing 0x3F to 0xFF as intermediate */
0011000000000000 00111111 00111111 00000010 -------- /* 140 CPI: comparing 0x3F to 0x3F as intermediate */
0000110000000000 00111111 11111111 00100001 00111110 /* 160 ADD: Adding 0x3F and 0xFF to set carry */
0000010000000000 00111111 00111110 00000000 -------- /* 180 CPC: compare with carry set, 0X3F and 0x3E */
0001100000000000 00111110 00111111 00110101 11111111 /* 200 SUB: subtract 0x3F from 0x3E, should set carry */
0000100000000000 11111111 00111111 00110100 10111111 /* 220 SBC: subtract with carry 0x3F from 0xFF */
0000100000000000 10111111 00111111 00010100 10000000 /* 240 SBC: subtract with carry 0x3F from 0xBE, C=0 */
0101000000000000 00111111 00111111 00000010 00000000 /* 260 SUBI: subtract immediate */
0100000000000000 00000000 00000001 00110101 11111111 /* 280 SBCI: subtract immediate with carry, C=0 */ 
0100000000000000 11111111 00001111 00110100 11101111 /* 300 SBCI: subtract immediate with carry, C=1 */
1001010000000010 00001111 -------- -------- 11110000 /* 320 SWAP: swap nibbles, upper nibble = 0 */
1001010000000010 01010000 -------- -------- 00000101 /* 340 SWAP: swap nibbles, lower nibble = 0 */
1001010001111000 00000111 -------- 10110100 00000001 /* 360 BSET: set I flag */
1001010011111000 00000111 -------- 00110100 00000000 /* 380 BCLR: clear I flag */
1001010001101000 00000110 -------- 01110100 00000001 /* 400 BSET: set T flag */
1001010011101000 00000110 -------- 00110100 00000000 /* 420 BCLR: clear T flag */
1001010011011000 00000101 -------- 00010100 00000000 /* 440 BCLR: clear H flag */
1001010001011000 00000101 -------- 00110100 00000001 /* 460 BSET: set H flag */
1001010011001000 00000100 -------- 00100100 00000000 /* 480 BCLR: clear S flag */
1001010001001000 00000100 -------- 00110100 00000001 /* 500 BSET: set S flag */
1001010000111000 00000011 -------- 00111100 00000001 /* 520 BSET: set V flag */
1001010010111000 00000011 -------- 00110100 00000000 /* 540 BCLR: clear V flag */
1001010010101000 00000010 -------- 00110000 00000000 /* 560 BCLR: clear N flag */
1001010000101000 00000010 -------- 00110100 00000001 /* 580 BSET: set N flag */
1001010000011000 00000001 -------- 00110110 00000001 /* 600 BSET: set Z flag */
1001010010011000 00000001 -------- 00110100 00000000 /* 620 BCLR: clear Z flag */
1001010000001000 00000000 -------- 00110101 00000001 /* 640 BSET: set C flag */
1001010010001000 00000000 -------- 00110100 00000000 /* 660 BCLR: clear C flag */
1111101000000000 00001000 00000011 01110100 00000001 /* 680 BST: Set T flag */
1111100000000000 00001000 00000001 -------- 00001010 /* 700 BLD: Set bit 1 using T flag */
1111101000000000 00001010 00000000 00110100 00000000 /* 720 BST: clear T flag */
1111100000000000 00001010 00000011 -------- 00000010 /* 740 BLD: clear bit 3 using T flag */
0010000000000000 01010101 10101010 00100010 00000000 /* 760 AND: And two bytes together */
0010000000000000 10101010 01011010 00100000 00001010 /* 780 AND: And two bytes together */
0111000000000000 01011010 01011010 00100000 01011010 /* 800 ANDI: AND immediate with register */
0111000000000000 01011010 11110101 00100000 01010000 /* 820 ANDI: AND immediate with register */
0111000000000000 01010000 00001111 00100010 00000000 /* 840 ANDI: AND immediate with register */
1001010000000000 00001111 00000000 00110101 11110000 /* 860 COM: Get complementary */
1001010000000000 01010011 00000000 00110101 10101100 /* 880 COM: Get complementary */
0010010000000000 00001111 10101111 00110101 10100000 /* 900 EOR: Exclusive or */
0010100000000000 00001111 11110000 00110101 11111111 /* 920 OR: OR two bytes */
0010100000000000 11110000 10100000 00110101 11110000 /* 940 OR: OR two bytes */
0110000000000000 10100000 10101111 00110101 10101111 /* 960 ORI: OR immediate bytes */
0110000000000000 10101111 00000000 00110101 10101111 /* 980 ORI: OR immediate bytes */
1001010000000101 10001000 00000000 00101100 11000100 /* 1000 ASR: arithmetic shift right */
1001010000000101 11000100 00000000 00101100 11100010 /* 1020 ASR: arithmetic shift right */
1001010000000101 00000001 00000000 00111011 00000000 /* 1040 ASR: arithmetic shift right */
1001010000000110 10000001 00000000 00111001 01000000 /* 1060 LSR: Logial shift right */
1001010000000110 01000000 00000000 00100000 00100000 /* 1080 LSR: Logial shift right */
1001010000000111 00000010 00000000 00100000 00000001 /* 1100 ROR: Rotate right */
1001010000000111 00000001 00000000 00111011 00000000 /* 1120 ROR: Rotate right */
1001010000000111 00000000 00000000 00101100 10000000 /* 1140 ROR: Rotate right */
1001010000000001 00000001 00000000 00110101 11111111 /* 1160 NEG: Take negative */
1001010000000011 11111111 00000000 00100011 00000000 /* 1180 INC: Increment value */
1001010000001010 00000000 00000000 00110101 11111111 /* 1200 DEC: Decrement value */
1001011000000000 11001111 00111111 -------- 00001110 /* 1220 ADIW: Add immediate value 1st cycle*/
1001011000000000 00000000 00000000 00100000 00000001 /* 1240 ADIW: Add immediate value 2nd cycle*/
1001011100000000 11111111 00111111 -------- 11000000 /* 1260 SBIW: Subtract immediate value 1st cycle*/
1001011100000000 00000010 00000000 00100000 00000010 /* 1280 SBIW: Subtract immediate value 2nd cycle*/
1001011100000000 00000000 00111111 -------- 11000001 /* 1300 SBIW: Subtract immediate value 1st cycle*/
1001011100000000 00000000 00000000 00110101 11111111 /* 1320 SBIW: Subtract immediate value 2nd cycle*/














 